
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Userrole {
  USER
  ADMIN
}

enum VehicleType {
  SEDAN
  SUV
  LUXURY
  SPORTS
  COMPACT
  VAN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          Userrole  @default(USER)
  phone         String?
  licenseNumber String?      
  sessions      Session[]
  accounts      Account[]
  orders        Order[]
 

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Vehicle {
  id          String      @id @default(cuid())
  name        String
  type        VehicleType
  brand       String
  model       String
  year        Int
  pricePerDay Float
  image       String
  images      String[]
  seats       Int
  fuelType    String
  transmission String
  mileage     String      @default("Unlimited")
  features    String[]
  stock Int
  isAvailable Boolean     @default(true)
  location    String?
  rating      Float       @default(0.0)
  reviewCount Int         @default(0)
  orders      Order[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("vehicle")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade) 
  vehicleId   String
  vehicle     Vehicle     @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  startDate   DateTime
  endDate     DateTime
  totalDays   Int
  dailyRate   Float
  totalAmount Float
  status      OrderStatus @default(PENDING)
  customerName    String
  customerEmail   String
  customerPhone   String
  customerLicense String?
  pickupLocation  String
  dropoffLocation String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("order")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    String   @default("pending") 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}
